/**********************************************************************
 * file:  sr_router.c 
 * date:  Mon Feb 18 12:50:42 PST 2002  
 * Contact: casado@stanford.edu 
 *
 * Description:
 * 
 * This file contains all the functions that interact directly
 * with the routing table, as well as the main entry method
 * for routing.
 *
 * #693354266
 * 
 **********************************************************************/

#include <stdio.h>
#include <assert.h>


#include "sr_if.h"
#include "sr_rt.h"
#include "sr_router.h"
#include "sr_protocol.h"

/*--------------------------------------------------------------------- 
 * Method: sr_init(void)
 * Scope:  Global
 *
 * Initialize the routing subsystem
 * 
 *---------------------------------------------------------------------*/

void sr_init(struct sr_instance* sr) 
{
    /* REQUIRES */
    assert(sr);

    /* Add initialization code here! */

} /* -- sr_init -- */



/*---------------------------------------------------------------------
 * Method: sr_handlepacket(uint8_t* p,char* interface)
 * Scope:  Global
 *
 * This method is called each time the router receives a packet on the
 * interface.  The packet buffer, the packet length and the receiving
 * interface are passed in as parameters. The packet is complete with
 * ethernet headers.
 *
 * Note: Both the packet buffer and the character's memory are handled
 * by sr_vns_comm.c that means do NOT delete either.  Make a copy of the
 * packet instead if you intend to keep it around beyond the scope of
 * the method call.
 *
 *---------------------------------------------------------------------*/

void sr_handlepacket(struct sr_instance* sr, 
        uint8_t * packet/* lent */,
        unsigned int len,
        char* interface/* lent */)
{
    /* REQUIRES */
    struct sr_ethernet_hdr* eth_hdr = (struct sr_ethernet_hdr*)packet;
    uint16_t ether_type = ntohs(eth_hdr->ether_type);

    if (ether_type == ethertype_ip) {
        printf("Received an IP packet\n");
    } else if (ether_type == ethertype_arp) {
        printf("Received an ARP packet\n");
    } else {
        printf("Received an unknown packet type: 0x%04x\n", ether_type);
    }
    if (ntohs(ethHdr->ether_type) == ethertype_arp) {
        /* Process the ARP
    assert(sr);
    assert(packet);
    assert(interface);

    printf("*** -> Received packet of length %d \n",len);

}/* end sr_ForwardPacket */

void sr_handle_arp_packet(struct sr_instance* sr,
                          uint8_t * packet, 
                          unsigned int len, 
                          char* interface)
{
    struct sr_ethernet_hdr* eth_hdr = (struct sr_ethernet_hdr*)packet;
    struct sr_arp_hdr* arp_hdr = (struct sr_arp_hdr*)(packet + sizeof(struct sr_ethernet_hdr));

    /* Check if it's an ARP request (opcode 1) */
    if (ntohs(arp_hdr->ar_op) == arp_op_request) {
        /* Process the ARP request */
        sr_handle_arp_request(sr, arp_hdr, interface);
    }
    /* Check if it's an ARP reply (opcode 2) */
    else if (ntohs(arp_hdr->ar_op) == arp_op_reply) {
        /* Process the ARP reply (e.g., update the ARP cache) */
        sr_handle_arp_reply(sr, arp_hdr, interface);
    }
}

void sr_handle_arp_request(struct sr_instance* sr, struct sr_arp_hdr* arp_hdr, char* interface)
{
    /* Find the interface with the IP address matching the ARP request target IP */
    struct sr_if* iface = sr_get_interface(sr, interface);

    /* Check if the target IP matches the router's IP address */
    if (iface && iface->ip == arp_hdr->ar_tip) {
        /* Send an ARP reply */
        sr_send_arp_reply(sr, arp_hdr, iface);
    }
}


/*--------------------------------------------------------------------- 
 * Method:
 *
 *---------------------------------------------------------------------*/
void sr_send_arp_reply(struct sr_instance* sr, struct sr_arp_hdr* arp_req, struct sr_if* iface)
{
    /* Create space for Ethernet and ARP headers */
    unsigned int len = sizeof(struct sr_ethernet_hdr) + sizeof(struct sr_arp_hdr);
    uint8_t* reply_packet = (uint8_t*)malloc(len);

    /* Populate the Ethernet header */
    struct sr_ethernet_hdr* eth_hdr = (struct sr_ethernet_hdr*)reply_packet;
    memcpy(eth_hdr->ether_dhost, arp_req->ar_sha, ETHER_ADDR_LEN); /* Destination MAC = Sender MAC from request */
    memcpy(eth_hdr->ether_shost, iface->addr, ETHER_ADDR_LEN);      /* Source MAC = Router MAC */
    eth_hdr->ether_type = htons(ethertype_arp);

    /* Populate the ARP header */
    struct sr_arp_hdr* arp_reply = (struct sr_arp_hdr*)(reply_packet + sizeof(struct sr_ethernet_hdr));
    arp_reply->ar_hrd = htons(arp_hrd_ethernet);
    arp_reply->ar_pro = htons(ethertype_ip);
    arp_reply->ar_hln = ETHER_ADDR_LEN;
    arp_reply->ar_pln = sizeof(uint32_t);
    arp_reply->ar_op  = htons(arp_op_reply);                       /* ARP reply operation */
    memcpy(arp_reply->ar_sha, iface->addr, ETHER_ADDR_LEN);         /* Sender hardware address (router MAC) */
    arp_reply->ar_sip = iface->ip;                                  /* Sender IP address (router IP) */
    memcpy(arp_reply->ar_tha, arp_req->ar_sha, ETHER_ADDR_LEN);     /* Target hardware address (requester's MAC) */
    arp_reply->ar_tip = arp_req->ar_sip;                            /* Target IP address (requester's IP) */

    /* Send the ARP reply */
    sr_send_packet(sr, reply_packet, len, iface->name);

    /* Free the allocated memory */
    free(reply_packet);
}
